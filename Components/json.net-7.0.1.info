{"Name":"Json.NET","Id":2089,"Alias":"json.net","Description":"Json.NET is a high-performance JSON framework.\n\n## Features\n\n - Flexible JSON serializer for converting between .NET objects and JSON\n - LINQ to JSON for manually reading and writing JSON\n - High performance, faster than .NET\u0027s built-in JSON serializers\n - Write indented, easy to read JSON\n - Convert JSON to and from XML\n\nFor simple conversions to and from JSON strings and .NET objects,\nJsonConvert provides the SerializeObject and DeserializeObject methods.\n\n```csharp\nusing Newtonsoft.Json;\n...\n\npublic class Person\n{\n    public string Name { get; set; }\n    public DateTime Birthday { get; set; }\n}\n\nvoid PersonToJsonToPersonExample ()\n{\n    var person = new Person { Name = \"Bob\", Birthday = new DateTime (1987, 2, 2) };\n    var json = JsonConvert.SerializeObject (person);\n    Console.WriteLine (\"JSON representation of person: {0}\", json);\n    var person2 = JsonConvert.DeserializeObject\u003cPerson\u003e (json);\n    Console.WriteLine (\"{0} - {1}\", person2.Name, person2.Birthday);\n}\n```\n\nFor dealing with JSON data in more direct form, without mapping them to C# classes, use LINQ to JSON:\n\n```csharp\nusing Newtonsoft.Json.Linq;\n...\n\nvoid LinqExample ()\n{\n    string json = @\"{ Name: \u0027Bob\u0027, HairColor: \u0027Brown\u0027 }\";\n    var bob = JObject.Parse (json);\n    \n    Console.WriteLine (\"{0} with {1} hair\", bob[\"Name\"], bob[\"HairColor\"]);\n}\n```\n","Version":"7.0.1","Summary":"Json.NET is a popular high-performance JSON framework for .NET","QuickStart":"For simple conversions to and from JSON strings and .NET objects,\nJsonConvert provides the SerializeObject and DeserializeObject methods.\n\n```csharp\npublic class Person\n{\n\tpublic string Name { get; set; }\n\tpublic DateTime Birthday { get; set; }\n}\n\nPerson person = new Person { Name = \"Bob\", Birthday = new DateTime (1987, 2, 2) };\nstring output = Newtonsoft.Json.JsonConvert.SerializeObject (person);\nConsole.WriteLine (output);\nConsole.WriteLine();\n\nperson = Newtonsoft.Json.JsonConvert.DeserializeObject\u003cPerson\u003e (output);\nConsole.WriteLine (\"{0} - {1}\", person.Name, person.Birthday);\n```\n\nFor dealing with JSON objects in more direct form, there\u0027s LINQ to JSON:\n\n```csharp\nstring json = @\"{ Name: \u0027Bob\u0027, HairColor: \u0027Brown\u0027 }\";\nvar bob = Newtonsoft.Json.Linq.JObject.Parse (json);\n\nConsole.WriteLine (\"{0} with {1} hair\", (string)bob[\"Name\"], (string)bob[\"HairColor\"]);\n```","Hash":"e0799145a8efac0868ee710b532a87eb","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}